<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Tutor">

<!-- 튜티 insert -->
<insert id="tuteeInsert">
	insert into tutee values(tutee_seq.nextval, #{id}, #{name}, #{email}, #{phone_country}, #{phone}, #{bank_name}, #{price}, #{account}, #{title},#{address}, default,#{refundPrice,jdbcType=VARCHAR},#{parent_seq})
</insert>

<!-- 튜티 현재인원 늘리기 -->
<update id="tuteeCurnumCount">
	update lesson set cur_num = cur_num+1 where seq = #{parent_seq}
</update>

<!-- 튜티 현재인원 줄이기 -->
<update id="tuteeCurnumCountMinus">
	update lesson set cur_num = cur_num-1 where seq= #{parent_seq}
</update>

<!-- 현재 강의 수강중인 튜티 뽑기 -->
<select id="tuteedto" resultType="kh.pingpong.dto.TuteeDTO">
	select * from tutee where parent_seq = #{parent_seq} and id=#{id}
</select>

<!-- 결제한사람이 또 결제하는지 -->
<select id="payTrue" resultType="int">
	select count(*) from tutee where parent_seq = #{parent_seq} and id =#{id}
</select>

<!-- 결제 취소한사람이 또 취소하는지 -->
<select id="refundTrue" resultType="int">
	select count(*) from tutee where parent_seq = #{parent_seq} and id =#{id} and cancle='Y'
</select>

<!-- 강위취소 튜티 환불금액 update 하고 강의 취소 'Y'로 바꾸기 -->
<update id="refundInsert">
	update tutee set cancle='Y', refundPrice = #{refundPrice} where parent_seq = #{parent_seq} and id =#{id}
</update>

<!-- 튜터신청서에 있는지 없는지-->
<select id="tutorTrue" resultType="int">
	select count(*) from tutor_app where id=#{id}
</select>
<!-- 튜터 신청서 패스했는지 안했는지 -->
<select id="passWhether" resultType="string">
	select pass from tutor_app where id=#{id}
</select>

<!-- 튜터 신청서 insert -->
<insert id="insert">
	insert into tutor_app values(tutor_app_seq.nextval,#{id},#{title},#{license,jdbcType=VARCHAR},#{career,jdbcType=VARCHAR},#{exp,jdbcType=VARCHAR},#{introduce},#{recomm,jdbcType=VARCHAR},default)
</insert>

<!-- 자격증 파일 insert -->
<insert id="insertFiles">
	insert into files values(files_seq.nextval,#{sysname}, #{oriname}, #{realpath,jdbcType=VARCHAR},'tutor', tutor_app_seq.currval)
</insert>

<!-- 강의 등록 신청서 -->
<insert id="lessonAppProc">
	insert into lesson values(lesson_seq.nextval, #{id}, #{name}, #{email}, #{phone_country}, #{phone},default, #{title}, #{price}, #{language},#{apply_start},#{apply_end},#{start_date},#{end_date},#{start_hour},#{start_minute},#{end_hour},#{end_minute},#{max_num},0,#{location},#{location_lat},#{location_lng},#{curriculum},default,#{view_count},default,default,default,default,default)
</insert>

<!-- 강의 수정 신청서 -->
<update id="lessonAppUpdateProc">
	update lesson set title = #{title}, apply_end=#{apply_end}, max_num=#{max_num}, curriculum = #{curriculum} where seq=#{seq}
</update>

<!-- 강의 취소 신청서 -->
<insert id="lessonCancleProc">
	insert into delete_app values(delete_app_seq.nextval, #{id}, #{category}, #{contents}, #{parent_seq})
</insert>

<!-- 강의 취소 됬는지 확인 -->
<select id="lessonCancle" resultType="int">
	select count(*) from delete_app where parent_seq = #{parent_seq} and id=#{id} and category=#{category}
</select>

<!-- 강의 조회수 -->
<update id="updateViewCount">
	update lesson set view_count = view_count + 1 where seq = #{seq}
</update>

<!-- 강의 좋아요 테이블에 값넣기 -->
<insert id="likeTrue">
	insert into like_list values(like_list_seq.nextval, #{id}, '강의', #{parent_seq})
</insert>

<!-- 강의 좋아요 됬는지 확인 -->
<select id="LikeIsTrue" resultType="int">
	select count(*) from like_list where parent_seq = #{parent_seq} and id =#{id} and category='강의' 
</select>

<!-- 강의 좋아요 수 업데이트 -->
<update id="updateLikeCount">
	update lesson set like_count = like_count + 1 where seq = #{seq}
</update>

<!-- 찜 테이블에 값넣기 -->
<insert id="insertJjim">
	insert into jjim values(jjim_seq.nextval, #{id}, '강의', #{parent_seq})
</insert>

<!-- 찜 좋아요 됬는지 확인 -->
<select id="JjimIsTrue" resultType="int">
	select count(*) from jjim where parent_seq = #{parent_seq} and id=#{id} and category='강의'
</select>

<!-- 찜 테이블에서 값 삭제하기 찜 취소 -->
<delete id="deleteJjim">
	delete jjim where id = #{id} and parent_seq = #{parent_seq} and category='강의'
</delete>

<!-- 같은게시물에 같은사람이 신고했는지 검사 -->
<select id="report" resultType="int">
	select count(*) from reportlist where parent_seq = #{parent_seq} and reporter=#{id} and category='강의'
</select>

<!-- 신고테이블에 저장 -->
<insert id="reportProc">
	insert into reportlist values(reportlist_seq.nextval, #{id}, #{reason}, #{reporter}, sysdate, #{parent_seq}, '강의', default)
</insert>

<!-- 강의 눌렀을때 뿌려줄 강의 view -->
<resultMap id="lessonViewProfile" type="kh.pingpong.dto.LessonDTO">
   	<result property="sysname" column="profile" />
</resultMap>

<select id="lessonView" resultMap="lessonViewProfile">
	select * from lesson where seq=#{value}
</select>

<!-- 튜터 프로필 뿌려주려고 -->
<resultMap id="TutorProfile" type="kh.pingpong.dto.MemberDTO">
   	<result property="sysname" column="profile" />
</resultMap>

<!-- 여기서부터 세개 튜터페이징 -->
<select id="selectTutorList" resultMap="TutorProfile">
	select * from (select member.*, row_number() over(order by grade desc) rnum from member where grade='tutor') 
	where rnum between #{start} and #{end}
</select>
<select id="getNextVal_tutor" resultType="int">
	select member_seq.nextval from dual
</select>

<select id="getArticleCount_tutor" resultType="int">
	select count(*) from (select member.*, row_number() over(order by grade desc) rnum from member where grade='tutor') 
</select>

<!-- 강의 리스트에 프로플 뿌려주려고 -->
<resultMap id="LessonProfile" type="kh.pingpong.dto.LessonDTO">
   	<result property="sysname" column="profile" />
</resultMap>
 
<!-- 여기서부터 세개 강의리스트 페이징 -->
<select id="selectLessonList" resultMap="LessonProfile">
	select * from (select lesson.*, row_number() over(order by ${orderBy} desc) rnum from lesson where pass='Y') 
	where rnum between #{start} and #{end}
</select>

<!-- 모집중, 진행중, 마감일 때 -->
<select id="selectLessonListPeriod" resultMap="LessonProfile">
	select * from (select lesson.*, row_number() over(order by ${orderBy} desc) rnum from lesson where pass='Y' 
	<trim prefixOverrides="and" prefix="and">
		<if test="ing !=null">
			and ${ing}=#{ingVal} 
		</if>
		<if test="keyword!=null">
			and ${keywordSelect} like '%${keyword}%'
		</if>
		<if test="end_date!=null">
			and start_date >= #{start_date} and #{end_date} >= end_date
		</if>
		<if test="location!=null">
			and location like '%${location}%'
		</if>
	</trim>
	)where rnum between #{start} and #{end}
</select>

<!-- 모집 진행 마감 자동으로 바뀌게하기 스케쥴러 -->
<update id="updateApplying">
	update lesson set applying ='N' where #{today_date} > apply_end  
</update>
<update id="updateProceeding1">
	update lesson set proceeding ='Y' where start_date = #{today_date} 
</update>
<update id="updateProceeding2">
	update lesson set proceeding ='N' where #{today_date} > end_date
</update>
<update id="updateProceeding3">
	update lesson set proceeding ='B' where #{today_date} > apply_end and start_date > #{today_date}
</update>


<!-- 키워드로 검색해서 리스트 뿌려주기 -->
<select id="search" resultMap="LessonProfile">
	select * from (select lesson.*, row_number() over(order by ${orderBy} desc) rnum from lesson 
	<trim prefixOverrides="and" prefix="where">
		pass='Y'
		<if test="ing!=null">
			and ${ing}=#{ingVal}
		</if>
		<if test="keyword!=null">
			and ${keywordSelect} like '%${keyword}%'
		</if>
		<if test="end_date!=null">
			and to_char(start_date) >= to_char(#{start_date}) and to_char(#{end_date}) >= to_char(end_date)
		</if>
		<if test="location!=null">
			and location like '%${location}%'
		</if>
	</trim>
	)where rnum between #{start} and #{end}
</select>

<select id="getNextVal_lesson" resultType="int">
	select lesson_seq.nextval from dual
</select>

<select id="getArticleCount_lesson" resultType="int">
	select count(*) from (select lesson.*, row_number() over(order by ${orderBy} desc) rnum from lesson
	<trim prefixOverrides="and" prefix="where">
		pass='Y' 
		<if test="ing!=null">
			and ${ing} = #{ingVal}
		</if>
		<if test="keyword!=null">
			and ${keywordSelect} like '%${keyword}%'
		</if>
		<if test="end_date!=null">
			and to_char(start_date) >= to_char(#{start_date}) and to_char(#{end_date}) >= to_char(end_date)
		</if>
		<if test="location!=null">
			and location like '%${location}%'
		</if>
	</trim>
	)
</select>

	<!-- 리큐 포인트 가져오기 -->
	<select id="reviewAvg" resultType="java.lang.Double">
		select round(avg(point),2) from review where parent_seq = #{parent_seq} and category= #{category}
	</select>
	
	<!-- 리큐 개수 가져오기 -->
	<select id="reviewCount" resultType="java.lang.Integer">
		select count(*) from review where parent_seq = #{parent_seq} and category= #{category}
	</select>
	
	<!-- 리뷰 포인트 업데이트 -->
	<update id="groupReviewPoint">
		update lesson set review_point = ${reviewAvg} where seq = ${seq}
	</update>
	
	<!-- 리뷰 총 개수  -->
	<update id="groupReviewCount">
		update lesson set review_count = ${reviewCount} where seq = ${seq}
	</update>

</mapper>